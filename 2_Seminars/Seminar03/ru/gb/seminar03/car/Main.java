package ru.gb.seminar03.car;

import ru.gb.seminar03.car.cars.Car;
import ru.gb.seminar03.car.cars.Harvester;
import ru.gb.seminar03.car.fuel.DieselStation;

import java.awt.*;

/**
 * 1. Спроектировать абстрактный класс "Car", у которого должны быть свойства:
 * марка, модель, цвет, тип кузова, число колес, тип топлива, тип коробки передач, объем двигателя;
 * методы: движение, обслуживание, переключение передач, включение фар, включение дворников.
 *
 * 2. Создать конкретный автомобиль путем наследования класса "Car".
 *
 * 3. Расширить абстрактный класс "Car", добавить метод: подметать улицу. Создать конкретный автомобиль путем
 * наследования класса "Car". Провести проверку принципа SRP. - Принцип нарушается,если метод реализуется в базовом
 * классе, так как в базовом методе реализуется специфичекий функционал автомобиля, не ожидаемый для всех видом
 * автомобилей. Тем самым метод начинает отвечать за несколько функциональностей. Вместо этого правильнее реализовать
 * метод "подметать улицу" в конкретном классе.
 *
 * 4. Расширить абстрактный класс "Car", добавить метод включения противотуманных фар, перевозка груза. Провести
 * проверку принципа OCP. - Принцип нарушается, если для добавления функционала применится абстрактный метод включения
 * противотуманных фар в базовом классе. Так как в этом случае для каждого существующего наследника придется
 * реализовывать этот навый метод, тем самым изменять существующий функционал подклассов. Правильнее будет создать
 * неабстрактный класс в базовом классе.
 *
 * 5. Создать конкретный автомобиль путем наследования класса "Car", определить число коле = 3. Провести проверку
 * принципа LSP. - Принцип нарушается, так как ломается логика программы, когда для трехколесного автомобиля
 * производится расчет сервиса, как для четырехколесного автомобиля.
 *
 * 6. Создать конкретный автомобиль путем наследования класса "Car", определить метод "движение" - "полет". Провести
 * проверку принципа LSP. - Принцип не нарушается, так как полет является частным случаем движения автомобиля.
 *
 * 7. Создать интерфейс "Заправочная станция", создать метод: заправка топливом.
 *
 * 8. Реализовать метод интерфейса "Заправочная станция" в конкретный класс "Car".
 *
 * 9. Добавить в интерфейс "Заправочнай станция" методы: протирка лобового стекла, протирка фар, протирка зеркал.
 *
 * 10. Имплементировать все методы интерфейса "Заправочная станция" в конкретный класс "Car". Провести проверку
 * принципа ISP. Создать дополнительный(е) интерфейсы и имплементировать их в конкретный класс "Car". Провести проверку
 * принципа ISP. - Принцип нарушается, если создать в интерфейса "Заправочная станция" методы, необязательно
 * относящиеся к заправочной станции. Не каждая заправка предоставляет подобные сервисы. Правильнее будет создать
 * необходимые методы в отдельном интерфейсе.
 *
 * 11. Создать путем наследования класса "Car" два автомобиля: с бензиновым и дизельным двигателями, имплементировать
 * метод "Заправка топливом" интерфейса "Заправочная станция". Реализовать заправку каждого автомобиля подходящим топливом.
 * Провести проверку принципа DIP. - Принцип нарушается, если класс конкретного автомобиля сделать зависимым от
 * конкретного класса заправочной станции.Правильнее сделать класс автомобиля зависимым от интерфейса заправочной станции.
 */
public class Main {
    public static void main(String[] args) {
        Harvester harvester= new Harvester("Harvester Brand", "Harvester model", Color.RED);
        System.out.println(harvester.getFuelType());
        DieselStation dieselStation = new DieselStation();
        harvester.setFuelStation(dieselStation);
        harvester.refuel();

    }

    public static double calculateMaintenance(Car car) {
        if (car.getWheelCount() == 6) {
            return 1500 * 6;
        } else {
            return 1000 * 4;
        }
    }
}
